/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { DailySummary } from "./DailySummary";
import { DailySummaryCountArgs } from "./DailySummaryCountArgs";
import { DailySummaryFindManyArgs } from "./DailySummaryFindManyArgs";
import { DailySummaryFindUniqueArgs } from "./DailySummaryFindUniqueArgs";
import { CreateDailySummaryArgs } from "./CreateDailySummaryArgs";
import { UpdateDailySummaryArgs } from "./UpdateDailySummaryArgs";
import { DeleteDailySummaryArgs } from "./DeleteDailySummaryArgs";
import { DailySummaryService } from "../dailySummary.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DailySummary)
export class DailySummaryResolverBase {
  constructor(
    protected readonly service: DailySummaryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DailySummary",
    action: "read",
    possession: "any",
  })
  async _dailySummariesMeta(
    @graphql.Args() args: DailySummaryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DailySummary])
  @nestAccessControl.UseRoles({
    resource: "DailySummary",
    action: "read",
    possession: "any",
  })
  async dailySummaries(
    @graphql.Args() args: DailySummaryFindManyArgs
  ): Promise<DailySummary[]> {
    return this.service.dailySummaries(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DailySummary, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DailySummary",
    action: "read",
    possession: "own",
  })
  async dailySummary(
    @graphql.Args() args: DailySummaryFindUniqueArgs
  ): Promise<DailySummary | null> {
    const result = await this.service.dailySummary(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DailySummary)
  @nestAccessControl.UseRoles({
    resource: "DailySummary",
    action: "create",
    possession: "any",
  })
  async createDailySummary(
    @graphql.Args() args: CreateDailySummaryArgs
  ): Promise<DailySummary> {
    return await this.service.createDailySummary({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DailySummary)
  @nestAccessControl.UseRoles({
    resource: "DailySummary",
    action: "update",
    possession: "any",
  })
  async updateDailySummary(
    @graphql.Args() args: UpdateDailySummaryArgs
  ): Promise<DailySummary | null> {
    try {
      return await this.service.updateDailySummary({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DailySummary)
  @nestAccessControl.UseRoles({
    resource: "DailySummary",
    action: "delete",
    possession: "any",
  })
  async deleteDailySummary(
    @graphql.Args() args: DeleteDailySummaryArgs
  ): Promise<DailySummary | null> {
    try {
      return await this.service.deleteDailySummary(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
