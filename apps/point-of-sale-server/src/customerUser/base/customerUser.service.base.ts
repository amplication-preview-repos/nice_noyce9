/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, CustomerUser as PrismaCustomerUser } from "@prisma/client";

export class CustomerUserServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CustomerUserCountArgs, "select">
  ): Promise<number> {
    return this.prisma.customerUser.count(args);
  }

  async customerUsers(
    args: Prisma.CustomerUserFindManyArgs
  ): Promise<PrismaCustomerUser[]> {
    return this.prisma.customerUser.findMany(args);
  }
  async customerUser(
    args: Prisma.CustomerUserFindUniqueArgs
  ): Promise<PrismaCustomerUser | null> {
    return this.prisma.customerUser.findUnique(args);
  }
  async createCustomerUser(
    args: Prisma.CustomerUserCreateArgs
  ): Promise<PrismaCustomerUser> {
    return this.prisma.customerUser.create(args);
  }
  async updateCustomerUser(
    args: Prisma.CustomerUserUpdateArgs
  ): Promise<PrismaCustomerUser> {
    return this.prisma.customerUser.update(args);
  }
  async deleteCustomerUser(
    args: Prisma.CustomerUserDeleteArgs
  ): Promise<PrismaCustomerUser> {
    return this.prisma.customerUser.delete(args);
  }
}
